from datetime import datetime
from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from sqlalchemy import select, update
from aiogram.types import FSInputFile

from aiogram.utils.markdown import hlink
import app.keyboards as kb
import app.databases.requests as rq
from app.databases.models import Item, SubscriptionDuration, UserSubscription, TelegramChannel, SubscriptionType
from datetime import datetime, timedelta
from app.databases.models import async_session, User
from app.keyboards import three_months_keyboard, trial_keyboard, subscription_trial_keyboard, bioacking_keyboard, bioacking_cancel_keyboard, personal_buttons_keyboard
import requests

from aiogram.types import ChatJoinRequest

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select, distinct
from app.databases.models import async_session 

from aiogram import Bot


router = Router()

@router.callback_query(F.data == "start_command")
async def start_callback(call: CallbackQuery):
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await call.bot.send_message(call.from_user.id, "/start")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é hbold
def hbold(text: str) -> str:
    return f"<b>{text}</b>"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é hlink
def hlink(text: str, url: str) -> str:
    return f'<a href="{url}">{text}</a>'

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "baza"
async def send_baza_message(target: types.Message | types.CallbackQuery):
    caption_text = (
        "<b>–†–ê–ó–î–ê–Æ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ü–†–ò–í–ê–¢–ö–ò –ó–ê <s>150.000$</s> 39$üò±</b>\n\n"
        "–ö—Ä–∞—Ç–∫–æ –æ —Ç–æ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "<b>‚Ä¢ 50+ –ü–†–ò–í–ê–¢–û–ö:</b> –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 150.000$+ –≤ –≥–æ–¥\n"
        "<b>‚Ä¢ –ë–ê–ó–ê –û–ë–£–ß–ï–ù–ò–ô:</b> –±–æ–ª–µ–µ 30 –∫—É—Ä—Å–æ–≤ –ø–æ –∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º\n"
        "(–≤—Å–µ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω—è—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç)\n"
        "<b>‚Ä¢ –ü–û–î–°–í–ï–ß–ï–ù–ù–´–ï –ò–î–ï–ò:</b> –º–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª —Å –æ—Ç–±–æ—Ä–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–∞–º–∏ (–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–ª–µ–µ +427% / –≥–æ–¥)\n"
        "<b>‚Ä¢ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì:</b> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ +140% –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º –ø–∞—Å—Å–∏–≤–µ\n"
        "<b>‚Ä¢ –ß–ê–¢ –ö–û–ú–ú–¨–Æ–ù–ò–¢–ò:</b> –æ–±—â–µ–Ω–∏–µ, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥, –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å –∏ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—Å–µ–º –ø—Ä–∏–≤–∞—Ç–∫–∞–º\n"
        "<b>‚Ä¢ –ú–ï–ú–ö–û–ò–ù–´ –ù–ê —Ö1000:</b> —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–∫–∞—á–∞—Ç—å —Å–≤–æ–π –Ω–µ–±–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç\n\n"
        "üéÅ –û–±—â–∏–π —Å–æ–∑–≤–æ–Ω –Ω–∞ —Ç–µ–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä—ã–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–µ—Å–ª–∞ –º–Ω–µ –±–æ–ª–µ–µ 393.000$ –∑–∞ 2024 –≥–æ–¥!\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ üëâüèΩ <a href='https://t.me/clubkitov'><b>–¢–´–ö</b></a>\n\n"
        "<b>üíµ –°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê:</b>\n\n"
        "1 –º–µ—Å—è—Ü–∞ ‚Äî <b>39$</b>\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî <b>99$</b>\n"
        "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>179$</b>\n"
        "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>349$</b>\n"
        "–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî <b>999$</b>\n\n"
        "–ò—Ç–æ–≥: –¥–µ–ª–∞–µ—à—å –≤—Å—ë –ø–æ –º–æ–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äì –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å\n–æ—Ç 1000$ –∑–∞ 30 –¥–Ω–µ–π. –ñ–ú–ò üëáüèΩ"
    )


    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if isinstance(target, types.CallbackQuery):
        message = target.message
    else:
        message = target

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer_photo(
        photo=FSInputFile('image/collage/collage.jpg'),
        caption=caption_text,
        reply_markup=kb.private_by_shef,
        parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    )

    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if isinstance(target, types.CallbackQuery):
        await target.answer()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "clubkitov"
async def send_clubkitov_message(target: types.Message | types.CallbackQuery):
    text = (
        "<b>–ö–õ–£–ë –ö–ò–¢–û–í‚Ñ¢ ‚Äî by @glavcom</b>\n\n"
        "–ú–æ—ë —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –ª—é–¥–µ–π —Å –º–æ–∑–≥–∞–º–∏ (–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–º), –≥–¥–µ —è —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π\n"
        "–ø—É—Ç—å –∫ —Ü–µ–ª–∏ –≤ 100.000.000$\n\n"
        "–¢–æ–ø–æ–≤—ã–µ —é—Ä–∏—Å—Ç—ã, –ª—É—á—à–∏–µ\n"
        "–≤—Ä–∞—á–∏, –∫–∏—Ç—ã, –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã,\n"
        "CEO –∫–æ–º–ø–∞–Ω–∏–π –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã\n\n"
        "<i>(–ª—é–±–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ—à–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö 1-–≥–æ —á–∞—Ç–∞)</i>\n\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 250.000$/–≥–æ–¥: –∫–ª—É–±—ã, –∫—É—Ä—Å—ã, –∏–Ω—Å–∞–π–¥—ã, –ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –ø—Ä–æ—á–µ–µ\n"
        "‚Ä¢ –ú–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª: —Å–¥–µ–ª–∫–∏\n"
        "—Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π +640%, –º—ã—Å–ª–∏\n"
        "–ø–æ —Ä—ã–Ω–∫—É, –∏–Ω—Å–∞–π–¥—ã, –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º, –ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö ü§´\n"
        "<b>‚Ä¢ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï</b> –∏–Ω–≤–µ—Å—Ç-—Ç–µ–º—ã\n"
        "—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –Ω–∞ —Ö10: ton –Ω–æ–º–µ—Ä–∞, —Å–ø–µ–∫—É–ª—è—Ü–∏—è NFT, —Å–Ω–∞–π–ø–∏–Ω–≥ —â–∏—Ç–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–µ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –ª–∏—á–Ω–æ–º 5\n"
        "–ª–µ—Ç–Ω–µ–º —Ä—ã–Ω–æ—á–Ω–æ–º –æ–ø—ã—Ç–µ\n"
        "<b>‚Ä¢ –ñ–ò–†–ù–ï–ô–®–ò–ô</b> —á–∞—Ç —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –≤–µ—Ç–∫–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏: —Ñ–æ—Ä–µ–∫—Å, –±–∏–æ—Ö–∞–∫–∏–Ω–≥, –º–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n"
        "üèõÔ∏è <b>–ò–Ω–≤–µ—Å—Ç —Ñ–æ–Ω–¥:</b> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
        "~40% –≥–æ–¥–æ–≤—ã—Ö –≤ –±–∞–∫—Å–µ.\n\n"
        "üíµ <b>–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê:</b>\n\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî <b>299$</b>\n"
        "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>499$</b>\n"
        "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>999$</b>\n"
        "–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî <b>2999$</b>\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ üëâüèΩ <a href='https://t.me/clubkitov'><b>–¢–´–ö</b></a>"
    )

    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if isinstance(target, types.CallbackQuery):
        message = target.message
    else:
        message = target

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer_photo(
        photo=FSInputFile('image/whale.png'),
        caption=text,
        reply_markup=subscription_trial_keyboard,
        parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    )

    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if isinstance(target, types.CallbackQuery):
        await target.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    start_param = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else ""

    if start_param == "baza":
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–≤–µ–Ω "baza", –≤—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await send_baza_message(message)
        
    elif start_param == "clubkitov":
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–≤–µ–Ω "clubkitov", –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await send_clubkitov_message(message)
    else:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        user_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        caption_text = (
            f"<b>‚õ©Ô∏è √ó {user_name}, –∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!</b>\n\n"
            "–Ø –µ–∂–µ–≥–æ–¥–Ω–æ —Ç—Ä–∞—á—É 150.000$+ \n"
            "–≤—ã–∫—É–ø–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Å–∞–π–¥—ã, –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—É–±—ã, –æ–±—É—á–µ–Ω–∏—è, –æ—Ç—á–µ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø—ã –∫ –ª—É—á—à–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º –ø–æ –∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º. –ß–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ\n"
            "–º–∞—Ç–µ—Ä–∏–∞–ª–∞ —è –¥–µ–ª—é—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
            f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —Ç—ã –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å +427% —Ç—É–ø–æ –ø–æ–≤—Ç–æ—Ä—è—è —Å–¥–µ–ª–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ {hlink('–∫–∞–Ω–∞–ª–∞', 'https://t.me/+Gs7mmvpSKaBkOGMy')} ü§ùüèΩ\n\n"
            f"<b>–ö–£–î–ê –¢–´ –ü–û–ü–ê–õ?</b>\n"
            "–≠—Ç–æ –º–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Ç–µ–±–µ —á–∞—Å—Ç—å —ç—Ç–∏—Ö —Ü–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–æ–≤ 365 –¥–Ω–µ–π \n"
            "–≤ –≥–æ–¥—É –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
            f"39$ ‚Äî —Ü–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: <b>–ñ–ú–ò –ù–ê –ö–ù–û–ü–ö–ò –ù–ò–ñ–ï üëáüèΩ</b>\n\n"
            f"<blockquote><b>üîó –ß–¢–û –¢–ê–ö–û–ï –ë–ê–ó–ê?</b> ‚Äî @CCLUB\nüîó <b>–ü–†–û –ö–õ–£–ë –ö–ò–¢–û–í</b> ‚Äî @CLUBKITOV</blockquote>\n\n"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer_photo(
            photo=FSInputFile('image/welcome.png'),
            caption=caption_text,
            reply_markup=kb.main,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–ø–æ–¥ —Ñ–æ—Ç–æ)
            parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
        )


@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: CallbackQuery):
     
    
    user_name = callback_query.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    caption_text = (
                f"<b>‚õ©Ô∏è √ó {user_name}, –∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!</b>\n\n"
                "–Ø –µ–∂–µ–≥–æ–¥–Ω–æ —Ç—Ä–∞—á—É 150.000$+ \n"
                "–≤—ã–∫—É–ø–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Å–∞–π–¥—ã, –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—É–±—ã, –æ–±—É—á–µ–Ω–∏—è, –æ—Ç—á–µ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø—ã –∫ –ª—É—á—à–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º –ø–æ –∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º. –ß–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ\n"
                "–º–∞—Ç–µ—Ä–∏–∞–ª–∞ —è –¥–µ–ª—é—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
                f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —Ç—ã –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å +427% —Ç—É–ø–æ –ø–æ–≤—Ç–æ—Ä—è—è —Å–¥–µ–ª–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ {hlink('–∫–∞–Ω–∞–ª–∞', 'https://t.me/+Gs7mmvpSKaBkOGMy')} ü§ùüèΩ\n\n"
                f"<b>–ö–£–î–ê –¢–´ –ü–û–ü–ê–õ?</b>\n"
                "–≠—Ç–æ –º–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Ç–µ–±–µ —á–∞—Å—Ç—å —ç—Ç–∏—Ö —Ü–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–æ–≤ 365 –¥–Ω–µ–π \n"
                "–≤ –≥–æ–¥—É –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
                f"39$ ‚Äî —Ü–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: <b>–ñ–ú–ò –ù–ê –ö–ù–û–ü–ö–ò –ù–ò–ñ–ï üëáüèΩ</b>\n\n"
                f"<blockquote><b>üîó –ß–¢–û –¢–ê–ö–û–ï –ë–ê–ó–ê?</b> ‚Äî @CCLUB\nüîó <b>–ü–†–û –ö–õ–£–ë –ö–ò–¢–û–í</b> ‚Äî @CLUBKITOV</blockquote>\n\n"
            )
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.answer_photo(
        photo=types.FSInputFile('image/welcome.png'),
        caption=caption_text,
        reply_markup=kb.main,  # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode="HTML"
    )

    await callback_query.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì¶ PRIVATE by –®–µ—Ñ"
@router.callback_query(lambda c: c.data == "baza")
async def private_by_shef(callback_query: CallbackQuery):
 
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_baza_message(callback_query)


def get_tron_transaction(tx_hash):
    url = f"https://apilist.tronscanapi.com/api/transaction-info?hash={tx_hash}"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json()
        token_transfers = data.get("tokenTransferInfo", {})
        to_address = token_transfers.get("to_address", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        amount = token_transfers.get("amount_str", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        print(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {to_address}, –°—É–º–º–∞: {amount}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ –æ–±—ã—á–Ω—ã–µ –¥–æ–ª–ª–∞—Ä—ã (–¥–µ–ª–∏–º –Ω–∞ 1,000,000)
        if amount != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–æ–ª–ª–∞—Ä—ã, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–π –∫—É—Ä—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 USDT = 1 –¥–æ–ª–ª–∞—Ä)
            amount_in_dollars = int(amount) / 1000000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–æ–ª–ª–∞—Ä—ã
            return to_address, amount_in_dollars
        
    return None, None


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ item_id
class SubscriptionState(StatesGroup):
    selected_item = State()
    
    
@router.callback_query(lambda c: c.data == "one_month")
async def buy_one_month(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(selected_item=1)
    await handle_subscription(callback_query, item_id=1)
    
@router.callback_query(lambda c: c.data == "three_months")
async def buy_one_month(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=11)
    await handle_subscription(callback_query, item_id=11)

@router.callback_query(lambda c: c.data == "six_months")
async def buy_six_months(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=2)
    await handle_subscription(callback_query, item_id=2)

@router.callback_query(lambda c: c.data == "subscribe_year")
async def buy_one_year(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=3)
    await handle_subscription(callback_query, item_id=3)

@router.callback_query(lambda c: c.data == "subscribe_forever")
async def buy_forever(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=4)
    await handle_subscription(callback_query, item_id=4)

async def handle_subscription(callback_query: CallbackQuery, item_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ item_id
    async with async_session() as session:
        item = await session.scalar(select(Item).where(Item.id == item_id))

        if item:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration_map = {
                SubscriptionDuration.one_month: timedelta(days=30),
                SubscriptionDuration.three_months: timedelta(days=90),
                SubscriptionDuration.six_months: timedelta(days=180),
                SubscriptionDuration.one_year: timedelta(days=365),
                SubscriptionDuration.forever: None
            }

            end_date = None
            if item.duration != SubscriptionDuration.forever:
                end_date = (datetime.now() + duration_map[item.duration]).strftime('%d.%m.%y')
            else:
                end_date = "–ù–∞–≤—Å–µ–≥–¥–∞"

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ–º
            print(f"–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ '{item.name}': {item.price}$")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text = (
                "üí∏ | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ\n\n"
                f"üìå –ü—Ä–æ–¥—É–∫—Ç: <b>{item.name}</b>\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{int(item.price)}$</b>\n"
                f"üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{end_date}</b>\n\n"
                "üîó –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –Ω–∞ USDT-TRC20:\n"
                "<code>TBLsYqEDqApVkXsizmcF5ivGdi8r2dgm3g</code>\n\n"
                "‚òùüèΩ –ñ–º–∏ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è.\n\n"
                "üí≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—à—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                "üÜò –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @glavsot"
            )
            print (f"Item type = {item.type}")
            # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            photo_path = "image/payment.png"  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if item.type == SubscriptionType.Base:
                reply_markup = three_months_keyboard
            elif item.type == SubscriptionType.Whales_club:
                reply_markup = trial_keyboard
            else:
                reply_markup = None  # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è

            await callback_query.message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–º–µ—Å—Ç–æ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à—É –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
async def activate_subscription(user_id, item_id):
    async with async_session() as session:
        user_subscription = UserSubscription(
            user_id=user_id,
            item_id=item_id,
            start_date=datetime.now(),
            end_date=None,  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            status="active",
            transaction_hash="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Ö–µ—à"  # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ
        )
        session.add(user_subscription)
        await session.commit()

async def check_and_expire_subscriptions():
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subscriptions = await session.execute(
            select(UserSubscription).where(UserSubscription.status == "active")
        )
        active_subscriptions = active_subscriptions.scalars().all()

        for subscription in active_subscriptions:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –æ–Ω–∞ –ø—Ä–æ—à–ª–∞
            if subscription.end_date and subscription.end_date < datetime.now():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ "inactive"
                subscription.status = "inactive"
                await session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                user = await session.scalar(select(User).where(User.id == subscription.user_id))
                if user:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    await send_subscription_expiration_message(user)
                print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {subscription.item.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                
async def send_subscription_expiration_message(user: User):
    # –¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
    await user.send_message("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.")
         
        
@router.message(lambda m: m.text and len(m.text.strip()) == 64 and all(c in "0123456789abcdefABCDEF" for c in m.text.strip()))
async def handle_transaction(message: Message, state: FSMContext):
    user_data = await state.get_data()
    item_id = user_data.get("selected_item")

    if not item_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return

    tx_hash = message.text.strip().replace("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", "").strip()
    if len(tx_hash) != 64:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    async with async_session() as session:
        existing_subscription = await session.scalar(
            select(UserSubscription)
            .where(UserSubscription.transaction_hash == tx_hash)
        )
        if existing_subscription:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –≠—Ç–æ—Ç —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

    to_address, amount = get_tron_transaction(tx_hash)

    if to_address == "TBLsYqEDqApVkXsizmcF5ivGdi8r2dgm3g" and amount != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
        async with async_session() as session:
            item = await session.scalar(select(Item).where(Item.id == item_id))
            
            if item and float(amount) == item.price:
                end_date = None
                if item.duration != SubscriptionDuration.forever:
                    duration_map = {
                        SubscriptionDuration.one_month: timedelta(days=30),
                        SubscriptionDuration.three_months: timedelta(days=90),
                        SubscriptionDuration.six_months: timedelta(days=180),
                        SubscriptionDuration.one_year: timedelta(days=365)
                    }
                    end_date = datetime.now() + duration_map[item.duration]

                user_subscription = UserSubscription(
                    user_id=message.from_user.id,
                    item_id=item.id,
                    start_date=datetime.now(),
                    end_date=end_date,
                    status="active",
                    transaction_hash=tx_hash
                )

                session.add(user_subscription)
                await session.commit()

                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {item.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                return

        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º–∞.")



    
        
@router.callback_query(lambda c: c.data == "cancel_subscription_base")
async def cancel_subscription(callback_query: CallbackQuery):
 
    
    caption_text = (
        "<b>–†–ê–ó–î–ê–Æ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ü–†–ò–í–ê–¢–ö–ò –ó–ê <s>150.000$</s> 39$üò±</b>\n\n"
        "–ö—Ä–∞—Ç–∫–æ –æ —Ç–æ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "<b>‚Ä¢ 50+ –ü–†–ò–í–ê–¢–û–ö:</b> –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 150.000$+ –≤ –≥–æ–¥\n"
        "<b>‚Ä¢ –ë–ê–ó–ê –û–ë–£–ß–ï–ù–ò–ô:</b> –±–æ–ª–µ–µ 30 –∫—É—Ä—Å–æ–≤ –ø–æ –∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º\n"
        "(–≤—Å–µ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω—è—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç)\n"
        "<b>‚Ä¢ –ü–û–î–°–í–ï–ß–ï–ù–ù–´–ï –ò–î–ï–ò:</b> –º–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª —Å –æ—Ç–±–æ—Ä–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–∞–º–∏ (–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–ª–µ–µ +427% / –≥–æ–¥)\n"
        "<b>‚Ä¢ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì:</b> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ +140% –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º –ø–∞—Å—Å–∏–≤–µ\n"
        "<b>‚Ä¢ –ß–ê–¢ –ö–û–ú–ú–¨–Æ–ù–ò–¢–ò:</b> –æ–±—â–µ–Ω–∏–µ, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥, –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å –∏ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—Å–µ–º –ø—Ä–∏–≤–∞—Ç–∫–∞–º\n"
        "<b>‚Ä¢ –ú–ï–ú–ö–û–ò–ù–´ –ù–ê —Ö1000:</b> —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–∫–∞—á–∞—Ç—å —Å–≤–æ–π –Ω–µ–±–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç\n\n"
        "üéÅ –û–±—â–∏–π —Å–æ–∑–≤–æ–Ω –Ω–∞ —Ç–µ–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä—ã–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–µ—Å–ª–∞ –º–Ω–µ –±–æ–ª–µ–µ 393.000$ –∑–∞ 2024 –≥–æ–¥!\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ üëâüèΩ <a href='https://t.me/clubkitov'><b>–¢–´–ö</b></a>\n\n"
        "<b>üíµ –°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê:</b>\n\n"
        "1 –º–µ—Å—è—Ü–∞ ‚Äî <b>39$</b>\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî <b>99$</b>\n"
        "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>179$</b>\n"
        "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî <b>349$</b>\n"
        "–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî <b>999$</b>\n\n"
        "–ò—Ç–æ–≥: –¥–µ–ª–∞–µ—à—å –≤—Å—ë –ø–æ –º–æ–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äì –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å\n–æ—Ç 1000$ –∑–∞ 30 –¥–Ω–µ–π. –ñ–ú–ò üëáüèΩ"
    )

    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer_photo(
        photo=FSInputFile('image/collage/collage.jpg'),
        caption=caption_text,
        reply_markup=kb.private_by_shef
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()

    
#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "trial_by_shef"
@router.callback_query(lambda c: c.data == "trial_by_shef")
async def send_subscription_message(callback_query: CallbackQuery):
 
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_clubkitov_message(callback_query)


async def process_trial_subscription(callback_query: CallbackQuery, duration: SubscriptionDuration, days: int):
    async with async_session() as session:
        item = await session.scalar(
            select(Item).where(
                Item.duration == duration,
                Item.category_id == 2
            )
        )

        if item:
            end_date = (datetime.now() + timedelta(days=days)).strftime('%d.%m.%y')
            text = (
                "üí∏ | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ\n\n"
                f"üìå –ü—Ä–æ–¥—É–∫—Ç: <b>{item.name}</b>\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{int(item.price)}$</b>\n"
                f"üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{end_date}</b>\n\n"
                "üîó –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –Ω–∞ USDT-TRC20:\n"
                "<code>TBLsYqEDqApVkXsizmcF5ivGdi8r2dgm3g</code>\n\n"
                "‚òùüèΩ –ñ–º–∏ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è.\n\n"
                "üí≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—à—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                "üÜò –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @glavsot"
            )

            photo_path = "image/payment.png"
            await callback_query.message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=text,
                parse_mode="HTML",
                reply_markup=trial_keyboard
            )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "whales_three_month")
async def buy_trial_month(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=5)
    await handle_subscription(callback_query, item_id=5)

@router.callback_query(lambda c: c.data == "whales_six_month")
async def buy_trial_quarter(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=6)
    await handle_subscription(callback_query, item_id=6)

@router.callback_query(lambda c: c.data == "whales_one_year")
async def buy_trial_half_year(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=7)
    await handle_subscription(callback_query, item_id=7)

@router.callback_query(lambda c: c.data == "whales_forever")
async def buy_trial_half_year(callback_query: CallbackQuery, state: FSMContext):
 
    await state.update_data(selected_item=8)
    await handle_subscription(callback_query, item_id=8)
    
    
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "trial_by_shef"
@router.callback_query(lambda c: c.data == "cancel_subscription_trial")
async def send_subscription_message(callback_query: CallbackQuery):
 
    text = (
        "–†–ê–ó–î–ê–Æ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –°–ö–õ–ê–î–ß–ò–ù–´ –ó–ê 100.000$ 60$üò±\n\n"
        "–ö—Ä–∞—Ç–∫–æ, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "‚Ä¢ –æ–±—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–µ —Å –Ω—É–ª—è\n"
        "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –æ–∫—É–ø–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫ –≤ 20 —Ä–∞–∑\n"
        "‚Ä¢ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–∏–≤–∞—Ç–∫–∞–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 150.000$ –≤ –≥–æ–¥\n"
        "‚Ä¢ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–º–∏ –∏–¥–µ—è–º–∏ –∏–∑ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–æ–∫ –∏ –∂–∏–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n"
        "‚Ä¢ —Ä–æ–∑—ã–≥—Ä—ã—à 1000 USDT —Å—Ä–µ–¥–∏ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "üéÅ –û–±—â–∏–π —Å–æ–∑–≤–æ–Ω –Ω–∞ —Ç–µ–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä—ã–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–µ—Å–ª–∞ –º–Ω–µ –±–æ–ª–µ–µ 293.000$ –∑–∞ 2023 –≥–æ–¥!\n\n"
        f"–ò—Ç–æ–≥: –¥–µ–ª–∞–µ—à—å –≤—Å—ë –ø–æ –º–æ–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äì –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å {hlink('1000$ –∑–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', 'https://teletype.in/@deskladchina/14days')}\n\n"
        "–≠—Ç–æ —É–±–∏–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer_photo(
        photo=types.FSInputFile('image/whale.png'),  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        caption=text,
        parse_mode="HTML",  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
        reply_markup=subscription_trial_keyboard
    )

    await callback_query.answer()
    



@router.callback_query(lambda c: c.data == "contacts")
async def show_contacts(callback_query: CallbackQuery):
 
    caption_text = (
        "üí¨ √ó –ù–∏–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ \n–≤—Ä–µ–º—è —Å—É—Ç–æ–∫ ‚Äî –≤–µ–ª–∫–æ–º ‚Üì\n\n"
        f"{hlink('<b>–ì–ª–∞–≤–∫–æ–º</b>', 'https://t.me/glavcom')} ‚Äî –ø–æ –≤–∞–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∏–Ω–≤–µ—Å—Ç —Å–æ–≤–µ—Ç, –º–Ω–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É.\n\n"
        f"{hlink('<b>–°–æ–≤–µ—Ç–Ω–∏–∫</b>', 'https://t.me/glavsot')} ‚Äî –ø–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º: –±–æ—Ç, –ø–µ—Ä–µ—Å—ã–ª, –Ω–∞—à–∏ –ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ / –±–∏—Ä–∂–∞–º / —Å–¥–µ–ª–∫–∞–º."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    await callback_query.message.answer_photo(
        photo=types.FSInputFile('image/contacts.png'),  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        caption=caption_text,
        reply_markup=keyboard,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        parse_mode="HTML"
    )
    await callback_query.answer()


async def check_subscription_status(user_id: int):
    async with async_session() as session:
        result = await session.execute(
            select(
                Item.name, 
                Item.category_id,  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                UserSubscription.start_date, 
                UserSubscription.end_date, 
                UserSubscription.status
            )
            .join(Item, Item.id == UserSubscription.item_id)
            .where(UserSubscription.user_id == user_id)
        )
        subscriptions = result.fetchall()

        active_subscriptions = []

        for subscription in subscriptions:
            name, category_id, start_date, end_date, status = subscription
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            if end_date and end_date < datetime.now():
                await session.execute(
                    update(UserSubscription)
                    .where(UserSubscription.user_id == user_id, UserSubscription.item_id == subscription.item_id)
                    .values(status="inactive")
                )
                await session.commit()
            else:
                active_subscriptions.append(subscription)

        return active_subscriptions  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ –¥–≤–∞
def chunked(lst, n):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    return [lst[i:i + n] for i in range(0, len(lst), n)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_channels_by_category(session, category, has_whales_club):
    query = select(TelegramChannel.name).where(TelegramChannel.category == category)
    
    if not has_whales_club:
        query = query.where(TelegramChannel.type_sub != "Whales_club_only")

    result = await session.execute(query)
    return result.scalars().all()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º)
async def get_filtered_categories(session, exclude_categories):
    query = select(distinct(TelegramChannel.category)).where(
        TelegramChannel.category.isnot(None),
        TelegramChannel.category.notin_(exclude_categories)
    )
    result = await session.execute(query)
    return result.scalars().all()

@router.callback_query(lambda c: c.data == "my_access")
async def show_my_access(callback_query: CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = callback_query.from_user.full_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    text = (
        f"<b>üïπÔ∏è √ó –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, {user_name}</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π\n–∫–∞–±–∏–Ω–µ—Ç, –Ω–∏–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è\n–≤—Å–µ —Ç–≤–æ–∏ –¥–æ—Å—Ç—É–ø—ã. "
        "–ï—Å–ª–∏\n–±—É–¥—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã\n–ø–∏—à–∏ –º–æ–µ–º—É "
        "<a href='https://t.me/glavsot'><b>—Å–æ–≤–µ—Ç–Ω–∏–∫—É</b></a>.\n\n"
        "<b>–ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–û–î–ü–ò–°–ö–ò:</b>\n\n"
    )

    async with async_session() as session:
        subscriptions = await check_subscription_status(user_id)

        if subscriptions:
            for name, category_id, start_date, end_date, status in subscriptions:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category_id == 1:
                    display_name = "–ë–∞–∑–∞"
                elif category_id == 2:
                    display_name = "–ö–ª—É–± –ö–∏—Ç–æ–≤"
                else:
                    display_name = name  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞

                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                if end_date:
                    remaining_days = (end_date - datetime.now()).days
                    if remaining_days > 0:
                        text += f"‚Äî {display_name}: {remaining_days} –¥–Ω–µ–π\n"
                    else:
                        text += f"‚Äî {display_name}: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n"
                else:
                    text += f"‚Äî {display_name}: –ù–∞–≤—Å–µ–≥–¥–∞\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    text += (
        "\n–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n–∂–º–∏ –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –≤—ã—à–µ, –∏–ª–∏\n–ø–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: <b>@glavcom.</b>\n\n"
        "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–≤–∞—Ä—É –∂–º–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
    )

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "image/cabinet.png"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_path),
        caption=text,
        parse_mode="HTML",
        reply_markup=personal_buttons_keyboard
    )

    await callback_query.answer()


async def check_for_base_subscription(user_id: int, session) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å item_id 1, 2, 3 –∏–ª–∏ 4
    result = await session.execute(
        select(UserSubscription.item_id)
        .where(UserSubscription.user_id == user_id)
    )
    subscriptions = result.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å item_id 1, 2, 3 –∏–ª–∏ 4
    for subscription in subscriptions:
        if subscription[0] in [1, 2, 3, 4]:
            return True
    return False


from aiogram.types import FSInputFile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSInputFile –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

@router.callback_query(lambda c: c.data == "channels")
async def show_main_menu(callback_query: CallbackQuery):
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = callback_query.from_user.id
    subscriptions = await check_subscription_status(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not subscriptions:
        await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    async with async_session() as session:
        has_base_subscription = await check_for_base_subscription(user_id, session)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="all_channels")]
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Discord –ø—Ä–∏–≤–∞—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if not has_base_subscription:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="Discord –ø—Ä–∏–≤–∞—Ç–∫–∏", callback_data="category_Discord –ø—Ä–∏–≤–∞—Ç–∫–∏")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="my_access")])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await callback_query.message.answer_photo(
        photo=FSInputFile("image/clubs.png"),  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",  # –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        reply_markup=keyboard  # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback


async def get_channel_invite_link(session, channel_name: str):
    # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ TelegramChannels
    result = await session.execute(
        select(TelegramChannel.invite_link).filter(TelegramChannel.name == channel_name)
    )
    channel = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    return channel  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç—Å—è None

from aiogram.types import FSInputFile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSInputFile –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

@router.callback_query(lambda c: c.data == "all_channels")
async def show_all_categories(callback_query: CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    subscriptions = await check_subscription_status(user_id)

    if not subscriptions:
        await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        await callback_query.answer()
        return

    async with async_session() as session:
        categories = await get_filtered_categories(session, ["Discord –ø—Ä–∏–≤–∞—Ç–∫–∏", "–ö—É—Ä—Å—ã"])

    if not categories:
        await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        await callback_query.answer()
        return

    buttons = [
        InlineKeyboardButton(text=category, callback_data=f"category_{category}") for category in categories
    ]
    chunked_buttons = chunked(buttons, 2)
    chunked_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="channels")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=chunked_buttons)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("category_"))
async def show_channels_by_category(callback_query: CallbackQuery):
    await callback_query.message.delete()
    category_name = callback_query.data.replace("category_", "")

    async with async_session() as session:
        result = await session.execute(
            select(TelegramChannel.name, TelegramChannel.invite_link, TelegramChannel.description, TelegramChannel.image_url)
            .where(TelegramChannel.category == category_name)
        )
        channels = result.fetchall()

    if not channels:
        await callback_query.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
        await callback_query.answer()
        return

    # –ë–µ—Ä—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    description = channels[0][2] if channels[0][2] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    image_url = channels[0][3]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª—ã
    buttons = [
        InlineKeyboardButton(text=name, url=invite_link) for name, invite_link, _, _ in channels
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü—ã
    chunked_buttons = chunked(buttons, 2)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    current_index = channels.index(channels[0])
    prev_channel = channels[current_index - 1] if current_index > 0 else channels[-1]
    next_channel = channels[(current_index + 1) % len(channels)]

    navigation_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"category_{category_name}_{prev_channel[0]}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"category_{category_name}_{next_channel[0]}")
    ]

    chunked_buttons.append(navigation_buttons)
    chunked_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="channels")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=chunked_buttons)

    text = f"<b>{category_name}</b>\n\n{description}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    if image_url:
        await callback_query.message.answer_photo(
            photo=image_url,
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback_query.message.answer(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    await callback_query.answer()




    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "Discord –ø—Ä–∏–≤–∞—Ç–∫–∏"
@router.callback_query(lambda c: c.data == "category_Discord –ø—Ä–∏–≤–∞—Ç–∫–∏")
async def show_discord_private(callback_query: CallbackQuery):
    await callback_query.message.delete()
    category = "Discord –ø—Ä–∏–≤–∞—Ç–∫–∏"
    user_id = callback_query.from_user.id
    subscriptions = await check_subscription_status(user_id)
    user_types = {sub[0] for sub in subscriptions}
    has_whales_club = any("Whales club" in sub_type for sub_type in user_types)

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        channels = await get_channels_by_category(session, category, has_whales_club)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª."

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    buttons = [InlineKeyboardButton(text=channel, callback_data=f"channel_{channel}") for channel in channels]
    chunked_buttons = chunked(buttons, 2)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    chunked_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="channels")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=chunked_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()


async def get_channel_info(session, channel_name):
    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
    result = await session.execute(
        select(TelegramChannel.description, TelegramChannel.image_url, TelegramChannel.invite_link)
        .where(TelegramChannel.name == channel_name)
    )
    channel_info = result.first()
    if channel_info:
        return {
            "description": channel_info.description,
            "image_url": channel_info.image_url,
            "invite_link": channel_info.invite_link
        }
    return None

@router.callback_query(lambda c: c.data.startswith("channel_"))
async def show_channel_info(callback_query: CallbackQuery):
    await callback_query.message.delete()
    channel_name = callback_query.data.replace("channel_", "")
    user_id = callback_query.from_user.id
    subscriptions = await check_subscription_status(user_id)
    user_types = {sub[0] for sub in subscriptions}
    has_whales_club = any("Whales club" in sub_type for sub_type in user_types)

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö "Discord –ø—Ä–∏–≤–∞—Ç–∫–∏" –∏ "–ö—É—Ä—Å—ã"
        discord_channels = await get_channels_by_category(session, "Discord –ø—Ä–∏–≤–∞—Ç–∫–∏", has_whales_club)
        course_channels = await get_channels_by_category(session, "–ö—É—Ä—Å—ã", has_whales_club)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        if channel_name in discord_channels:
            category = "Discord –ø—Ä–∏–≤–∞—Ç–∫–∏"
            all_channels = discord_channels
        elif channel_name in course_channels:
            category = "–ö—É—Ä—Å—ã"
            all_channels = course_channels
        else:
            await callback_query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        channel_info = await get_channel_info(session, channel_name)
        if not channel_info:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        description = channel_info.get("description")
        image_url = channel_info.get("image_url")
        invite_link = channel_info.get("invite_link")

        if not invite_link:
            await callback_query.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ
    current_index = all_channels.index(channel_name)
    prev_channel = all_channels[current_index - 1] if current_index > 0 else all_channels[-1]
    next_channel = all_channels[(current_index + 1) % len(all_channels)]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π
    text = f"üì¢ –ö–∞–Ω–∞–ª: {channel_name}\n\n{description}\n\n–ù–∞–∂–º–∏—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ –∏ —Å—Å—ã–ª–∫–æ–π (–∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–æ–π)
    channel_button = InlineKeyboardButton(text=channel_name, url=invite_link)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    navigation_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"channel_{prev_channel}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"channel_{next_channel}")
    ]
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–±–æ–ª—å—à–∞—è, –≤–Ω–∏–∑—É)
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"category_{category}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    chunked_buttons = chunked(navigation_buttons, 2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä –∏ –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
    chunked_buttons.append([channel_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –≤ —Ü–µ–Ω—Ç—Ä
    chunked_buttons.append([back_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–µ–π resize –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=chunked_buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if image_url:
        try:
            await callback_query.message.answer_photo(
                photo=image_url,  # –ü–µ—Ä–µ–¥–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                caption=text,  # –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                reply_markup=keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await callback_query.message.answer(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        await callback_query.message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback_query.answer()
    
    
@router.callback_query(lambda c: c.data == "category_–ö—É—Ä—Å—ã")
async def show_courses(callback_query: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.delete()
    category = "–ö—É—Ä—Å—ã"
    user_id = callback_query.from_user.id
    subscriptions = await check_subscription_status(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ "Whales club"
    user_types = {sub[0] for sub in subscriptions}
    has_whales_club = any("Whales club" in sub_type for sub_type in user_types)

    if not has_whales_club:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Whales club, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Whales club. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        await callback_query.answer()
        return

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ö—É—Ä—Å—ã" (—Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Whales club)
        channels = await get_channels_by_category(session, category, has_whales_club)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        "üè¥‚Äç‚ò†Ô∏è √ó –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –Ω–∞–π–¥–µ—à—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ –∫—É—Ä—Å—ã. –ù–∞–ø–æ–º–Ω—é ‚Äî —É —Ç–µ–ª–µ–≥–∏ —Å—Ç–æ–∏—Ç —Å–ø–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 5 –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç.\n\n"
        "‚Ä¢ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∏–∑—É—á–µ–Ω–∏—é</b> ‚Äî –ª—É—á—à–∏–µ –∫—É—Ä—Å—ã –ø–æ –Ω–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ —Å—É—Ç–∏ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å).\n\n"
        "‚Ä¢ <b>–í—Å–µ –∫—É—Ä—Å—ã</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π."
    )


    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    buttons = [InlineKeyboardButton(text=channel, callback_data=f"channel_{channel}") for channel in channels]
    chunked_buttons = chunked(buttons, 2)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    chunked_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="my_access")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=chunked_buttons)

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "image/courses.png"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_path),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        caption=text,  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup=keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )

    await callback_query.answer()

