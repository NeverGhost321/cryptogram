import asyncio
import time
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ChatJoinRequest
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from sqlalchemy import update
from datetime import datetime
from app.handlers import router
from app.databases.models import async_session, UserSubscription, Item, TelegramChannel, SubscriptionType
import logging

from aiogram import types

from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton  

from app.handlers import router
logging.basicConfig(level=logging.INFO)

async def get_user_subscription_category(user_id: int):
    async with async_session() as session:
        result = await session.execute(
            select(UserSubscription)
            .options(joinedload(UserSubscription.item))
            .where(
                UserSubscription.user_id == user_id,
                UserSubscription.status == 'active'
            )
        )
        subscriptions = result.scalars().all()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SubscriptionType –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        categories = {sub.item.type for sub in subscriptions}  
        return categories  # –í–µ—Ä–Ω—ë—Ç Enum SubscriptionType

async def get_allowed_channels(subscription_categories):
    async with async_session() as session:
        result = await session.execute(select(TelegramChannel))
        channels = result.scalars().all()

        allowed_channels = []
        for channel in channels:
            if SubscriptionType.Whales_club in subscription_categories:
                allowed_channels.append(channel.channel_id)
            elif SubscriptionType.Base in subscription_categories and channel.type_sub != 'Whales_club_only':
                allowed_channels.append(channel.channel_id)

        return allowed_channels

async def check_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞."""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        result = await session.execute(
            select(UserSubscription)
            .where(UserSubscription.status == 'active')
        )
        subscriptions = result.scalars().all()

        for subscription in subscriptions:
            if subscription.end_date and subscription.end_date <= datetime.now():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ inactive
                await session.execute(
                    update(UserSubscription)
                    .where(UserSubscription.id == subscription.id)
                    .values(status='inactive')
                )
                await session.commit()

                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                await remove_user_from_channels(subscription.user_id)

async def remove_user_from_channels(user_id: int):
    """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(
            select(TelegramChannel)
            .join(UserSubscription)
            .where(UserSubscription.user_id == user_id)
        )
        channels = result.scalars().all()

        bot = Bot.get_current()
        for channel in channels:
            try:
                await bot.ban_chat_member(chat_id=channel.channel_id, user_id=user_id)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel.channel_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel.channel_id}: {e}")

async def schedule_subscription_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞."""
    while True:
        await check_subscriptions()
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
        
           
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

async def send_welcome_message(bot: Bot, user_id: int, username: str):
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
    text = (
        f"–ê–ª–æ—Ö–∞, {username}\n\n"
        "<b>–í—Å–µ–≥–æ 3 –º–∏–Ω—É—Ç—ã.</b>\n"
        "<i>–ö–∞–∫–∏—Ö-—Ç–æ 180 —Å–µ–∫—É–Ω–¥‚Ä¶</i>\n\n"
        "–ó–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É—Å–ø–µ–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ –∂–µ —Ç—ã –ø–æ–ø–∞–ª, –∏ –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –æ—Ç +427%.\n"
        "<b>–û—Ç –Ω–µ–Ω—É–∂–Ω–æ–π –ª–∏—Ä–∏–∫–∏, –∫ –¥–µ–ª—É üëáüèΩ</b>\n\n"
        "<b>–§–ê–ö–¢ #1</b> ‚Äî —è —Ç—Ä–∞—á—É –±–æ–ª–µ–µ 217.000$ –µ–∂–µ–≥–æ–¥–Ω–æ, —Å–∫—É–ø–∞—è –ª—É—á—à–∏–µ –∫—Ä–∏–ø—Ç–æ –∏ –∏–Ω–≤–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏: –∫–ª—É–±—ã, –∏–Ω—Å–∞–π–¥—ã, "
        "–æ–±—É—á–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø—ã –∫ —Å–µ—Ä–≤–∏—Å–∞–º –∏ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º.\n\n"
        "–ß–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–µ–ª—é—Å—å —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —Ç—ã –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å "
        "–æ—Ç +427% —Ç—É–ø–æ –ø–æ–≤—Ç–æ—Ä—è—è –∑–∞ –º–Ω–æ–π.\n\n"
        "<b>–§–ê–ö–¢ #2</b> ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∏–Ω—Å–∞–π–¥.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –º–æ–µ–π <a href='https://t.me/cclub'><b>–ë–ê–ó–ï</b></a> "
        "–≤—Å–µ–≥–æ –∑–∞ 39$ / –º–µ—Å (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞, —á—Ç–æ–±—ã –æ—Ç—Å–µ—è—Ç—å –Ω–∞—Ö–ª–µ–±–Ω–∏–∫–æ–≤).\n\n"
        "<b>–§–ê–ö–¢ #3</b> ‚Äî –º–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∞–ø—Ä–∏–æ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–∞–Ω–∞: —Å–¥–µ–ª–∫–∏, "
        "–Ω–æ–≤–æ—Å—Ç–∏, –∏–Ω–≤–µ—Å—Ç-–∏–¥–µ–∏, –∏–Ω—Å–∞–π–¥—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º, –ø–æ–ª–∏—Ç–∏–∫–∞.\n"
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä–µ–ø–∏ –µ–≥–æ —É —Å–µ–±—è."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    message = await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile('image/welcome.jpg'),
        caption=text,
        parse_mode="HTML"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    start_button = InlineKeyboardButton(text="–ó–ê–ü–£–°–¢–ò–¢–¨ –ë–û–¢–ê", callback_data="start_bot")
    start_keyboard = InlineKeyboardMarkup(inline_keyboard=[[start_button]])

    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∂–Ω—ã–º–∏ —Å—é–∂–µ—Ç–∫–∞–º–∏, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ø–µ—Ä–≤–æ–µ
    second_text = (
        "<b>–í–ê–ñ–ù–´–ï –°–Æ–ñ–ï–¢–ö–ò –ò–ó –ö–ê–ù–ê–õ–ê</b>\n"
        "<i>–°–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Ç—ã –Ω–∞—á–Ω–µ—à—å —Ç–æ—Ä–≥–æ–≤–ª—é:</i>\n\n"
        "‚Ä¢ –ú–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ü§´\n"
        "‚Ä¢ –ö–∞–∫ —è —Å–¥–µ–ª–∞–ª +427% –∑–∞ –≥–æ–¥, —É–¥–µ–ª—è—è –≤—Å–µ–≥–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.\n"
        "‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–∏—Ö –∏–∫—Å–æ–≤ (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞).\n"
        "‚Ä¢ –ö–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ BMW X5 COMPETITION (160.000$).\n"
        "‚Ä¢ +7.000$ –∫–∞–∫ —Å –∫—É—Å—Ç–∞, –∏–ª–∏ '–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 500.000$'.\n"
        "‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞, –º–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∏–Ω—Å–∞–π–¥—ã ‚Äî –∫–∞–∫ –≤—Å—ë —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—Ä–∏–ø—Ç–æ–π –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏?\n"
        "<i>(—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ)</i>\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start –Ω–∏–∂–µ, welcome üëáüèΩ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ
    await bot.send_message(
        chat_id=user_id,
        text=second_text,
        reply_to_message_id=message.message_id,  # –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_markup=start_keyboard
    )

    
async def main():
    bot = Bot(
        token='6786983737:AAEWM03ZgqW37Z-VPTCuuO-xfhFDFBHCMnQ',
        default=DefaultBotProperties(parse_mode='HTML')
    )
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    
    @dp.chat_join_request()
    async def approve_join_request(update: ChatJoinRequest):
        user_id = update.from_user.id  
        chat_id = update.chat.id
        username = update.from_user.username or update.from_user.first_name
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª {chat_id}")

        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª —Å ID -1002033938511, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º
        if chat_id == -1002033938511:
            logging.info(f"–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–î–û–ë–†–ï–ù–ò–ï –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id} –≤ {chat_id}")
            await update.approve()  # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
            await send_welcome_message(bot, user_id, username)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É

        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        user_categories = await get_user_subscription_category(user_id)
        logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_categories}")

        if not user_categories:
            await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.")
            return

        allowed_channels = await get_allowed_channels(user_categories)
        logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {allowed_channels}")

        if abs(chat_id) in allowed_channels:
            logging.info(f"–û–î–û–ë–†–Ø–ï–ú –∑–∞—è–≤–∫—É –¥–ª—è {user_id} –≤ {chat_id}")
            await update.approve()
            await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        else:
            logging.info(f"–û–¢–ö–ê–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {chat_id}")
            await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(schedule_subscription_check())
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())